# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsalt
else:
    import _libsalt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)




def isLibsalt():
    return True

def hasGUI():
    return True

def close():
    simulation.close()

def start(args):
    simulation.load(args)

def load(args):
    simulation.load(args)

def simulationStep(step=0):
    simulation.step(step)

def getCurrentStep():
    return simulation.getCurrentStep()

def setCurrentStep(step=0):
    simulation.setCurrentStep(step)

def getBeginStep():
    return simulation.getBeginStep()

def getEndStep():
    return simulation.getEndStep()


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsalt.delete_SwigPyIterator

    def value(self):
        return _libsalt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsalt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsalt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsalt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsalt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsalt.SwigPyIterator_copy(self)

    def next(self):
        return _libsalt.SwigPyIterator_next(self)

    def __next__(self):
        return _libsalt.SwigPyIterator___next__(self)

    def previous(self):
        return _libsalt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsalt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsalt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsalt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsalt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsalt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsalt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsalt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libsalt:
_libsalt.SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.StringVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.StringVector___bool__(self)

    def __len__(self):
        return _libsalt.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.StringVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.StringVector_pop(self)

    def append(self, x):
        return _libsalt.StringVector_append(self, x)

    def empty(self):
        return _libsalt.StringVector_empty(self)

    def size(self):
        return _libsalt.StringVector_size(self)

    def swap(self, v):
        return _libsalt.StringVector_swap(self, v)

    def begin(self):
        return _libsalt.StringVector_begin(self)

    def end(self):
        return _libsalt.StringVector_end(self)

    def rbegin(self):
        return _libsalt.StringVector_rbegin(self)

    def rend(self):
        return _libsalt.StringVector_rend(self)

    def clear(self):
        return _libsalt.StringVector_clear(self)

    def get_allocator(self):
        return _libsalt.StringVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.StringVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.StringVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.StringVector_swiginit(self, _libsalt.new_StringVector(*args))

    def push_back(self, x):
        return _libsalt.StringVector_push_back(self, x)

    def front(self):
        return _libsalt.StringVector_front(self)

    def back(self):
        return _libsalt.StringVector_back(self)

    def assign(self, n, x):
        return _libsalt.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.StringVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.StringVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.StringVector_reserve(self, n)

    def capacity(self):
        return _libsalt.StringVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_StringVector

# Register StringVector in _libsalt:
_libsalt.StringVector_swigregister(StringVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.IntVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.IntVector___bool__(self)

    def __len__(self):
        return _libsalt.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.IntVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.IntVector_pop(self)

    def append(self, x):
        return _libsalt.IntVector_append(self, x)

    def empty(self):
        return _libsalt.IntVector_empty(self)

    def size(self):
        return _libsalt.IntVector_size(self)

    def swap(self, v):
        return _libsalt.IntVector_swap(self, v)

    def begin(self):
        return _libsalt.IntVector_begin(self)

    def end(self):
        return _libsalt.IntVector_end(self)

    def rbegin(self):
        return _libsalt.IntVector_rbegin(self)

    def rend(self):
        return _libsalt.IntVector_rend(self)

    def clear(self):
        return _libsalt.IntVector_clear(self)

    def get_allocator(self):
        return _libsalt.IntVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.IntVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.IntVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.IntVector_swiginit(self, _libsalt.new_IntVector(*args))

    def push_back(self, x):
        return _libsalt.IntVector_push_back(self, x)

    def front(self):
        return _libsalt.IntVector_front(self)

    def back(self):
        return _libsalt.IntVector_back(self)

    def assign(self, n, x):
        return _libsalt.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.IntVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.IntVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.IntVector_reserve(self, n)

    def capacity(self):
        return _libsalt.IntVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_IntVector

# Register IntVector in _libsalt:
_libsalt.IntVector_swigregister(IntVector)

class LibsaltException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, what):
        _libsalt.LibsaltException_swiginit(self, _libsalt.new_LibsaltException(what))
    __swig_destroy__ = _libsalt.delete_LibsaltException

# Register LibsaltException in _libsalt:
_libsalt.LibsaltException_swigregister(LibsaltException)
cvar = _libsalt.cvar
INVALID_DOUBLE_VALUE = cvar.INVALID_DOUBLE_VALUE
INVALID_INT_VALUE = cvar.INVALID_INT_VALUE

class LibsaltResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsalt.delete_LibsaltResult

    def toString(self):
        return _libsalt.LibsaltResult_toString(self)

    def __init__(self):
        _libsalt.LibsaltResult_swiginit(self, _libsalt.new_LibsaltResult())

# Register LibsaltResult in _libsalt:
_libsalt.LibsaltResult_swigregister(LibsaltResult)

class LibsaltPosition(LibsaltResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def toString(self):
        return _libsalt.LibsaltPosition_toString(self)
    x = property(_libsalt.LibsaltPosition_x_get, _libsalt.LibsaltPosition_x_set)
    y = property(_libsalt.LibsaltPosition_y_get, _libsalt.LibsaltPosition_y_set)
    z = property(_libsalt.LibsaltPosition_z_get, _libsalt.LibsaltPosition_z_set)

    def __init__(self):
        _libsalt.LibsaltPosition_swiginit(self, _libsalt.new_LibsaltPosition())
    __swig_destroy__ = _libsalt.delete_LibsaltPosition

# Register LibsaltPosition in _libsalt:
_libsalt.LibsaltPosition_swigregister(LibsaltPosition)

class LibsaltInt(LibsaltResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsalt.LibsaltInt_swiginit(self, _libsalt.new_LibsaltInt(*args))

    def toString(self):
        return _libsalt.LibsaltInt_toString(self)
    value = property(_libsalt.LibsaltInt_value_get, _libsalt.LibsaltInt_value_set)
    __swig_destroy__ = _libsalt.delete_LibsaltInt

# Register LibsaltInt in _libsalt:
_libsalt.LibsaltInt_swigregister(LibsaltInt)

class LibsaltDouble(LibsaltResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsalt.LibsaltDouble_swiginit(self, _libsalt.new_LibsaltDouble(*args))

    def toString(self):
        return _libsalt.LibsaltDouble_toString(self)
    value = property(_libsalt.LibsaltDouble_value_get, _libsalt.LibsaltDouble_value_set)
    __swig_destroy__ = _libsalt.delete_LibsaltDouble

# Register LibsaltDouble in _libsalt:
_libsalt.LibsaltDouble_swigregister(LibsaltDouble)

class LibsaltString(LibsaltResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsalt.LibsaltString_swiginit(self, _libsalt.new_LibsaltString(*args))

    def toString(self):
        return _libsalt.LibsaltString_toString(self)
    value = property(_libsalt.LibsaltString_value_get, _libsalt.LibsaltString_value_set)
    __swig_destroy__ = _libsalt.delete_LibsaltString

# Register LibsaltString in _libsalt:
_libsalt.LibsaltString_swigregister(LibsaltString)

class LibsaltStringList(LibsaltResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def toString(self):
        return _libsalt.LibsaltStringList_toString(self)
    value = property(_libsalt.LibsaltStringList_value_get, _libsalt.LibsaltStringList_value_set)

    def __init__(self):
        _libsalt.LibsaltStringList_swiginit(self, _libsalt.new_LibsaltStringList())
    __swig_destroy__ = _libsalt.delete_LibsaltStringList

# Register LibsaltStringList in _libsalt:
_libsalt.LibsaltStringList_swigregister(LibsaltStringList)

class TLSPhaseVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.TLSPhaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.TLSPhaseVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.TLSPhaseVector___bool__(self)

    def __len__(self):
        return _libsalt.TLSPhaseVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.TLSPhaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.TLSPhaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.TLSPhaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.TLSPhaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.TLSPhaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.TLSPhaseVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.TLSPhaseVector_pop(self)

    def append(self, x):
        return _libsalt.TLSPhaseVector_append(self, x)

    def empty(self):
        return _libsalt.TLSPhaseVector_empty(self)

    def size(self):
        return _libsalt.TLSPhaseVector_size(self)

    def swap(self, v):
        return _libsalt.TLSPhaseVector_swap(self, v)

    def begin(self):
        return _libsalt.TLSPhaseVector_begin(self)

    def end(self):
        return _libsalt.TLSPhaseVector_end(self)

    def rbegin(self):
        return _libsalt.TLSPhaseVector_rbegin(self)

    def rend(self):
        return _libsalt.TLSPhaseVector_rend(self)

    def clear(self):
        return _libsalt.TLSPhaseVector_clear(self)

    def get_allocator(self):
        return _libsalt.TLSPhaseVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.TLSPhaseVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.TLSPhaseVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.TLSPhaseVector_swiginit(self, _libsalt.new_TLSPhaseVector(*args))

    def push_back(self, x):
        return _libsalt.TLSPhaseVector_push_back(self, x)

    def front(self):
        return _libsalt.TLSPhaseVector_front(self)

    def back(self):
        return _libsalt.TLSPhaseVector_back(self)

    def assign(self, n, x):
        return _libsalt.TLSPhaseVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.TLSPhaseVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.TLSPhaseVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.TLSPhaseVector_reserve(self, n)

    def capacity(self):
        return _libsalt.TLSPhaseVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_TLSPhaseVector

# Register TLSPhaseVector in _libsalt:
_libsalt.TLSPhaseVector_swigregister(TLSPhaseVector)

class TLSPhasePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsalt.TLSPhasePair_swiginit(self, _libsalt.new_TLSPhasePair(*args))
    first = property(_libsalt.TLSPhasePair_first_get, _libsalt.TLSPhasePair_first_set)
    second = property(_libsalt.TLSPhasePair_second_get, _libsalt.TLSPhasePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libsalt.delete_TLSPhasePair

# Register TLSPhasePair in _libsalt:
_libsalt.TLSPhasePair_swigregister(TLSPhasePair)

class TLSSchedule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _scheduleID, _offset, _phasevector):
        _libsalt.TLSSchedule_swiginit(self, _libsalt.new_TLSSchedule(_scheduleID, _offset, _phasevector))
    __swig_destroy__ = _libsalt.delete_TLSSchedule
    myID = property(_libsalt.TLSSchedule_myID_get, _libsalt.TLSSchedule_myID_set)
    myOffset = property(_libsalt.TLSSchedule_myOffset_get, _libsalt.TLSSchedule_myOffset_set)
    myPhaseVector = property(_libsalt.TLSSchedule_myPhaseVector_get, _libsalt.TLSSchedule_myPhaseVector_set)

    def getPhaseVector(self):
        return _libsalt.TLSSchedule_getPhaseVector(self)

    def getSchedulID(self):
        return _libsalt.TLSSchedule_getSchedulID(self)

    def getOffset(self):
        return _libsalt.TLSSchedule_getOffset(self)

# Register TLSSchedule in _libsalt:
_libsalt.TLSSchedule_swigregister(TLSSchedule)

class TLSSchedulesMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.TLSSchedulesMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.TLSSchedulesMap___nonzero__(self)

    def __bool__(self):
        return _libsalt.TLSSchedulesMap___bool__(self)

    def __len__(self):
        return _libsalt.TLSSchedulesMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsalt.TLSSchedulesMap___getitem__(self, key)

    def __delitem__(self, key):
        return _libsalt.TLSSchedulesMap___delitem__(self, key)

    def has_key(self, key):
        return _libsalt.TLSSchedulesMap_has_key(self, key)

    def keys(self):
        return _libsalt.TLSSchedulesMap_keys(self)

    def values(self):
        return _libsalt.TLSSchedulesMap_values(self)

    def items(self):
        return _libsalt.TLSSchedulesMap_items(self)

    def __contains__(self, key):
        return _libsalt.TLSSchedulesMap___contains__(self, key)

    def key_iterator(self):
        return _libsalt.TLSSchedulesMap_key_iterator(self)

    def value_iterator(self):
        return _libsalt.TLSSchedulesMap_value_iterator(self)

    def __setitem__(self, *args):
        return _libsalt.TLSSchedulesMap___setitem__(self, *args)

    def asdict(self):
        return _libsalt.TLSSchedulesMap_asdict(self)

    def __init__(self, *args):
        _libsalt.TLSSchedulesMap_swiginit(self, _libsalt.new_TLSSchedulesMap(*args))

    def empty(self):
        return _libsalt.TLSSchedulesMap_empty(self)

    def size(self):
        return _libsalt.TLSSchedulesMap_size(self)

    def swap(self, v):
        return _libsalt.TLSSchedulesMap_swap(self, v)

    def begin(self):
        return _libsalt.TLSSchedulesMap_begin(self)

    def end(self):
        return _libsalt.TLSSchedulesMap_end(self)

    def rbegin(self):
        return _libsalt.TLSSchedulesMap_rbegin(self)

    def rend(self):
        return _libsalt.TLSSchedulesMap_rend(self)

    def clear(self):
        return _libsalt.TLSSchedulesMap_clear(self)

    def get_allocator(self):
        return _libsalt.TLSSchedulesMap_get_allocator(self)

    def count(self, x):
        return _libsalt.TLSSchedulesMap_count(self, x)

    def erase(self, *args):
        return _libsalt.TLSSchedulesMap_erase(self, *args)

    def find(self, x):
        return _libsalt.TLSSchedulesMap_find(self, x)

    def lower_bound(self, x):
        return _libsalt.TLSSchedulesMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsalt.TLSSchedulesMap_upper_bound(self, x)
    __swig_destroy__ = _libsalt.delete_TLSSchedulesMap

# Register TLSSchedulesMap in _libsalt:
_libsalt.TLSSchedulesMap_swigregister(TLSSchedulesMap)

class TLSTODMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.TLSTODMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.TLSTODMap___nonzero__(self)

    def __bool__(self):
        return _libsalt.TLSTODMap___bool__(self)

    def __len__(self):
        return _libsalt.TLSTODMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsalt.TLSTODMap___getitem__(self, key)

    def __delitem__(self, key):
        return _libsalt.TLSTODMap___delitem__(self, key)

    def has_key(self, key):
        return _libsalt.TLSTODMap_has_key(self, key)

    def keys(self):
        return _libsalt.TLSTODMap_keys(self)

    def values(self):
        return _libsalt.TLSTODMap_values(self)

    def items(self):
        return _libsalt.TLSTODMap_items(self)

    def __contains__(self, key):
        return _libsalt.TLSTODMap___contains__(self, key)

    def key_iterator(self):
        return _libsalt.TLSTODMap_key_iterator(self)

    def value_iterator(self):
        return _libsalt.TLSTODMap_value_iterator(self)

    def __setitem__(self, *args):
        return _libsalt.TLSTODMap___setitem__(self, *args)

    def asdict(self):
        return _libsalt.TLSTODMap_asdict(self)

    def __init__(self, *args):
        _libsalt.TLSTODMap_swiginit(self, _libsalt.new_TLSTODMap(*args))

    def empty(self):
        return _libsalt.TLSTODMap_empty(self)

    def size(self):
        return _libsalt.TLSTODMap_size(self)

    def swap(self, v):
        return _libsalt.TLSTODMap_swap(self, v)

    def begin(self):
        return _libsalt.TLSTODMap_begin(self)

    def end(self):
        return _libsalt.TLSTODMap_end(self)

    def rbegin(self):
        return _libsalt.TLSTODMap_rbegin(self)

    def rend(self):
        return _libsalt.TLSTODMap_rend(self)

    def clear(self):
        return _libsalt.TLSTODMap_clear(self)

    def get_allocator(self):
        return _libsalt.TLSTODMap_get_allocator(self)

    def count(self, x):
        return _libsalt.TLSTODMap_count(self, x)

    def erase(self, *args):
        return _libsalt.TLSTODMap_erase(self, *args)

    def find(self, x):
        return _libsalt.TLSTODMap_find(self, x)

    def lower_bound(self, x):
        return _libsalt.TLSTODMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsalt.TLSTODMap_upper_bound(self, x)
    __swig_destroy__ = _libsalt.delete_TLSTODMap

# Register TLSTODMap in _libsalt:
_libsalt.TLSTODMap_swigregister(TLSTODMap)

class LibsaltNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.LibsaltNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.LibsaltNodeVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.LibsaltNodeVector___bool__(self)

    def __len__(self):
        return _libsalt.LibsaltNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.LibsaltNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.LibsaltNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.LibsaltNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.LibsaltNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.LibsaltNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.LibsaltNodeVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.LibsaltNodeVector_pop(self)

    def append(self, x):
        return _libsalt.LibsaltNodeVector_append(self, x)

    def empty(self):
        return _libsalt.LibsaltNodeVector_empty(self)

    def size(self):
        return _libsalt.LibsaltNodeVector_size(self)

    def swap(self, v):
        return _libsalt.LibsaltNodeVector_swap(self, v)

    def begin(self):
        return _libsalt.LibsaltNodeVector_begin(self)

    def end(self):
        return _libsalt.LibsaltNodeVector_end(self)

    def rbegin(self):
        return _libsalt.LibsaltNodeVector_rbegin(self)

    def rend(self):
        return _libsalt.LibsaltNodeVector_rend(self)

    def clear(self):
        return _libsalt.LibsaltNodeVector_clear(self)

    def get_allocator(self):
        return _libsalt.LibsaltNodeVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.LibsaltNodeVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.LibsaltNodeVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.LibsaltNodeVector_swiginit(self, _libsalt.new_LibsaltNodeVector(*args))

    def push_back(self, x):
        return _libsalt.LibsaltNodeVector_push_back(self, x)

    def front(self):
        return _libsalt.LibsaltNodeVector_front(self)

    def back(self):
        return _libsalt.LibsaltNodeVector_back(self)

    def assign(self, n, x):
        return _libsalt.LibsaltNodeVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.LibsaltNodeVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.LibsaltNodeVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.LibsaltNodeVector_reserve(self, n)

    def capacity(self):
        return _libsalt.LibsaltNodeVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_LibsaltNodeVector

# Register LibsaltNodeVector in _libsalt:
_libsalt.LibsaltNodeVector_swigregister(LibsaltNodeVector)

class LibsaltLinkVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.LibsaltLinkVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.LibsaltLinkVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.LibsaltLinkVector___bool__(self)

    def __len__(self):
        return _libsalt.LibsaltLinkVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.LibsaltLinkVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.LibsaltLinkVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.LibsaltLinkVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.LibsaltLinkVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.LibsaltLinkVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.LibsaltLinkVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.LibsaltLinkVector_pop(self)

    def append(self, x):
        return _libsalt.LibsaltLinkVector_append(self, x)

    def empty(self):
        return _libsalt.LibsaltLinkVector_empty(self)

    def size(self):
        return _libsalt.LibsaltLinkVector_size(self)

    def swap(self, v):
        return _libsalt.LibsaltLinkVector_swap(self, v)

    def begin(self):
        return _libsalt.LibsaltLinkVector_begin(self)

    def end(self):
        return _libsalt.LibsaltLinkVector_end(self)

    def rbegin(self):
        return _libsalt.LibsaltLinkVector_rbegin(self)

    def rend(self):
        return _libsalt.LibsaltLinkVector_rend(self)

    def clear(self):
        return _libsalt.LibsaltLinkVector_clear(self)

    def get_allocator(self):
        return _libsalt.LibsaltLinkVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.LibsaltLinkVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.LibsaltLinkVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.LibsaltLinkVector_swiginit(self, _libsalt.new_LibsaltLinkVector(*args))

    def push_back(self, x):
        return _libsalt.LibsaltLinkVector_push_back(self, x)

    def front(self):
        return _libsalt.LibsaltLinkVector_front(self)

    def back(self):
        return _libsalt.LibsaltLinkVector_back(self)

    def assign(self, n, x):
        return _libsalt.LibsaltLinkVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.LibsaltLinkVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.LibsaltLinkVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.LibsaltLinkVector_reserve(self, n)

    def capacity(self):
        return _libsalt.LibsaltLinkVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_LibsaltLinkVector

# Register LibsaltLinkVector in _libsalt:
_libsalt.LibsaltLinkVector_swigregister(LibsaltLinkVector)

class LibsaltLaneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.LibsaltLaneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.LibsaltLaneVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.LibsaltLaneVector___bool__(self)

    def __len__(self):
        return _libsalt.LibsaltLaneVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.LibsaltLaneVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.LibsaltLaneVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.LibsaltLaneVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.LibsaltLaneVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.LibsaltLaneVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.LibsaltLaneVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.LibsaltLaneVector_pop(self)

    def append(self, x):
        return _libsalt.LibsaltLaneVector_append(self, x)

    def empty(self):
        return _libsalt.LibsaltLaneVector_empty(self)

    def size(self):
        return _libsalt.LibsaltLaneVector_size(self)

    def swap(self, v):
        return _libsalt.LibsaltLaneVector_swap(self, v)

    def begin(self):
        return _libsalt.LibsaltLaneVector_begin(self)

    def end(self):
        return _libsalt.LibsaltLaneVector_end(self)

    def rbegin(self):
        return _libsalt.LibsaltLaneVector_rbegin(self)

    def rend(self):
        return _libsalt.LibsaltLaneVector_rend(self)

    def clear(self):
        return _libsalt.LibsaltLaneVector_clear(self)

    def get_allocator(self):
        return _libsalt.LibsaltLaneVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.LibsaltLaneVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.LibsaltLaneVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.LibsaltLaneVector_swiginit(self, _libsalt.new_LibsaltLaneVector(*args))

    def push_back(self, x):
        return _libsalt.LibsaltLaneVector_push_back(self, x)

    def front(self):
        return _libsalt.LibsaltLaneVector_front(self)

    def back(self):
        return _libsalt.LibsaltLaneVector_back(self)

    def assign(self, n, x):
        return _libsalt.LibsaltLaneVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.LibsaltLaneVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.LibsaltLaneVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.LibsaltLaneVector_reserve(self, n)

    def capacity(self):
        return _libsalt.LibsaltLaneVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_LibsaltLaneVector

# Register LibsaltLaneVector in _libsalt:
_libsalt.LibsaltLaneVector_swigregister(LibsaltLaneVector)

class LibsaltCellVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.LibsaltCellVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.LibsaltCellVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.LibsaltCellVector___bool__(self)

    def __len__(self):
        return _libsalt.LibsaltCellVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.LibsaltCellVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.LibsaltCellVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.LibsaltCellVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.LibsaltCellVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.LibsaltCellVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.LibsaltCellVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.LibsaltCellVector_pop(self)

    def append(self, x):
        return _libsalt.LibsaltCellVector_append(self, x)

    def empty(self):
        return _libsalt.LibsaltCellVector_empty(self)

    def size(self):
        return _libsalt.LibsaltCellVector_size(self)

    def swap(self, v):
        return _libsalt.LibsaltCellVector_swap(self, v)

    def begin(self):
        return _libsalt.LibsaltCellVector_begin(self)

    def end(self):
        return _libsalt.LibsaltCellVector_end(self)

    def rbegin(self):
        return _libsalt.LibsaltCellVector_rbegin(self)

    def rend(self):
        return _libsalt.LibsaltCellVector_rend(self)

    def clear(self):
        return _libsalt.LibsaltCellVector_clear(self)

    def get_allocator(self):
        return _libsalt.LibsaltCellVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.LibsaltCellVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.LibsaltCellVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.LibsaltCellVector_swiginit(self, _libsalt.new_LibsaltCellVector(*args))

    def push_back(self, x):
        return _libsalt.LibsaltCellVector_push_back(self, x)

    def front(self):
        return _libsalt.LibsaltCellVector_front(self)

    def back(self):
        return _libsalt.LibsaltCellVector_back(self)

    def assign(self, n, x):
        return _libsalt.LibsaltCellVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.LibsaltCellVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.LibsaltCellVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.LibsaltCellVector_reserve(self, n)

    def capacity(self):
        return _libsalt.LibsaltCellVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_LibsaltCellVector

# Register LibsaltCellVector in _libsalt:
_libsalt.LibsaltCellVector_swigregister(LibsaltCellVector)

class LibsaltConnectionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.LibsaltConnectionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.LibsaltConnectionVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.LibsaltConnectionVector___bool__(self)

    def __len__(self):
        return _libsalt.LibsaltConnectionVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.LibsaltConnectionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.LibsaltConnectionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.LibsaltConnectionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.LibsaltConnectionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.LibsaltConnectionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.LibsaltConnectionVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.LibsaltConnectionVector_pop(self)

    def append(self, x):
        return _libsalt.LibsaltConnectionVector_append(self, x)

    def empty(self):
        return _libsalt.LibsaltConnectionVector_empty(self)

    def size(self):
        return _libsalt.LibsaltConnectionVector_size(self)

    def swap(self, v):
        return _libsalt.LibsaltConnectionVector_swap(self, v)

    def begin(self):
        return _libsalt.LibsaltConnectionVector_begin(self)

    def end(self):
        return _libsalt.LibsaltConnectionVector_end(self)

    def rbegin(self):
        return _libsalt.LibsaltConnectionVector_rbegin(self)

    def rend(self):
        return _libsalt.LibsaltConnectionVector_rend(self)

    def clear(self):
        return _libsalt.LibsaltConnectionVector_clear(self)

    def get_allocator(self):
        return _libsalt.LibsaltConnectionVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.LibsaltConnectionVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.LibsaltConnectionVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.LibsaltConnectionVector_swiginit(self, _libsalt.new_LibsaltConnectionVector(*args))

    def push_back(self, x):
        return _libsalt.LibsaltConnectionVector_push_back(self, x)

    def front(self):
        return _libsalt.LibsaltConnectionVector_front(self)

    def back(self):
        return _libsalt.LibsaltConnectionVector_back(self)

    def assign(self, n, x):
        return _libsalt.LibsaltConnectionVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.LibsaltConnectionVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.LibsaltConnectionVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.LibsaltConnectionVector_reserve(self, n)

    def capacity(self):
        return _libsalt.LibsaltConnectionVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_LibsaltConnectionVector

# Register LibsaltConnectionVector in _libsalt:
_libsalt.LibsaltConnectionVector_swigregister(LibsaltConnectionVector)

class LibsaltVehicleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsalt.LibsaltVehicleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsalt.LibsaltVehicleVector___nonzero__(self)

    def __bool__(self):
        return _libsalt.LibsaltVehicleVector___bool__(self)

    def __len__(self):
        return _libsalt.LibsaltVehicleVector___len__(self)

    def __getslice__(self, i, j):
        return _libsalt.LibsaltVehicleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsalt.LibsaltVehicleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsalt.LibsaltVehicleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsalt.LibsaltVehicleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsalt.LibsaltVehicleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsalt.LibsaltVehicleVector___setitem__(self, *args)

    def pop(self):
        return _libsalt.LibsaltVehicleVector_pop(self)

    def append(self, x):
        return _libsalt.LibsaltVehicleVector_append(self, x)

    def empty(self):
        return _libsalt.LibsaltVehicleVector_empty(self)

    def size(self):
        return _libsalt.LibsaltVehicleVector_size(self)

    def swap(self, v):
        return _libsalt.LibsaltVehicleVector_swap(self, v)

    def begin(self):
        return _libsalt.LibsaltVehicleVector_begin(self)

    def end(self):
        return _libsalt.LibsaltVehicleVector_end(self)

    def rbegin(self):
        return _libsalt.LibsaltVehicleVector_rbegin(self)

    def rend(self):
        return _libsalt.LibsaltVehicleVector_rend(self)

    def clear(self):
        return _libsalt.LibsaltVehicleVector_clear(self)

    def get_allocator(self):
        return _libsalt.LibsaltVehicleVector_get_allocator(self)

    def pop_back(self):
        return _libsalt.LibsaltVehicleVector_pop_back(self)

    def erase(self, *args):
        return _libsalt.LibsaltVehicleVector_erase(self, *args)

    def __init__(self, *args):
        _libsalt.LibsaltVehicleVector_swiginit(self, _libsalt.new_LibsaltVehicleVector(*args))

    def push_back(self, x):
        return _libsalt.LibsaltVehicleVector_push_back(self, x)

    def front(self):
        return _libsalt.LibsaltVehicleVector_front(self)

    def back(self):
        return _libsalt.LibsaltVehicleVector_back(self)

    def assign(self, n, x):
        return _libsalt.LibsaltVehicleVector_assign(self, n, x)

    def resize(self, *args):
        return _libsalt.LibsaltVehicleVector_resize(self, *args)

    def insert(self, *args):
        return _libsalt.LibsaltVehicleVector_insert(self, *args)

    def reserve(self, n):
        return _libsalt.LibsaltVehicleVector_reserve(self, n)

    def capacity(self):
        return _libsalt.LibsaltVehicleVector_capacity(self)
    __swig_destroy__ = _libsalt.delete_LibsaltVehicleVector

# Register LibsaltVehicleVector in _libsalt:
_libsalt.LibsaltVehicleVector_swigregister(LibsaltVehicleVector)

class TLSLogic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _nodeID, _schedules, _todplan):
        _libsalt.TLSLogic_swiginit(self, _libsalt.new_TLSLogic(_nodeID, _schedules, _todplan))
    __swig_destroy__ = _libsalt.delete_TLSLogic
    myTLSID = property(_libsalt.TLSLogic_myTLSID_get, _libsalt.TLSLogic_myTLSID_set)
    myScheduleMap = property(_libsalt.TLSLogic_myScheduleMap_get, _libsalt.TLSLogic_myScheduleMap_set)
    myTODPlan = property(_libsalt.TLSLogic_myTODPlan_get, _libsalt.TLSLogic_myTODPlan_set)

    def getTLSID(self):
        return _libsalt.TLSLogic_getTLSID(self)

    def getScheduleMap(self):
        return _libsalt.TLSLogic_getScheduleMap(self)

    def getTODPlan(self):
        return _libsalt.TLSLogic_getTODPlan(self)

# Register TLSLogic in _libsalt:
_libsalt.TLSLogic_swigregister(TLSLogic)

class LibsaltNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, e):
        return _libsalt.LibsaltNode___eq__(self, e)

    def __init__(self, *args):
        _libsalt.LibsaltNode_swiginit(self, _libsalt.new_LibsaltNode(*args))
    __swig_destroy__ = _libsalt.delete_LibsaltNode
    id = property(_libsalt.LibsaltNode_id_get, _libsalt.LibsaltNode_id_set)
    x = property(_libsalt.LibsaltNode_x_get, _libsalt.LibsaltNode_x_set)
    y = property(_libsalt.LibsaltNode_y_get, _libsalt.LibsaltNode_y_set)
    type = property(_libsalt.LibsaltNode_type_get, _libsalt.LibsaltNode_type_set)

    def toString(self):
        return _libsalt.LibsaltNode_toString(self)

# Register LibsaltNode in _libsalt:
_libsalt.LibsaltNode_swigregister(LibsaltNode)

class LibsaltLink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, e):
        return _libsalt.LibsaltLink___eq__(self, e)

    def __init__(self, *args):
        _libsalt.LibsaltLink_swiginit(self, _libsalt.new_LibsaltLink(*args))
    __swig_destroy__ = _libsalt.delete_LibsaltLink
    id = property(_libsalt.LibsaltLink_id_get, _libsalt.LibsaltLink_id_set)
    fromNode = property(_libsalt.LibsaltLink_fromNode_get, _libsalt.LibsaltLink_fromNode_set)
    toNode = property(_libsalt.LibsaltLink_toNode_get, _libsalt.LibsaltLink_toNode_set)
    numLanes = property(_libsalt.LibsaltLink_numLanes_get, _libsalt.LibsaltLink_numLanes_set)
    shape = property(_libsalt.LibsaltLink_shape_get, _libsalt.LibsaltLink_shape_set)
    speedLimit = property(_libsalt.LibsaltLink_speedLimit_get, _libsalt.LibsaltLink_speedLimit_set)
    spreadType = property(_libsalt.LibsaltLink_spreadType_get, _libsalt.LibsaltLink_spreadType_set)
    info = property(_libsalt.LibsaltLink_info_get, _libsalt.LibsaltLink_info_set)
    len = property(_libsalt.LibsaltLink_len_get, _libsalt.LibsaltLink_len_set)
    leftPocket = property(_libsalt.LibsaltLink_leftPocket_get, _libsalt.LibsaltLink_leftPocket_set)
    rightPocket = property(_libsalt.LibsaltLink_rightPocket_get, _libsalt.LibsaltLink_rightPocket_set)

    def toString(self, *args):
        return _libsalt.LibsaltLink_toString(self, *args)

# Register LibsaltLink in _libsalt:
_libsalt.LibsaltLink_swigregister(LibsaltLink)

class LibsaltConnection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsalt.LibsaltConnection_swiginit(self, _libsalt.new_LibsaltConnection(*args))
    __swig_destroy__ = _libsalt.delete_LibsaltConnection
    fromLink = property(_libsalt.LibsaltConnection_fromLink_get, _libsalt.LibsaltConnection_fromLink_set)
    toLink = property(_libsalt.LibsaltConnection_toLink_get, _libsalt.LibsaltConnection_toLink_set)
    fromLane = property(_libsalt.LibsaltConnection_fromLane_get, _libsalt.LibsaltConnection_fromLane_set)
    toLane = property(_libsalt.LibsaltConnection_toLane_get, _libsalt.LibsaltConnection_toLane_set)
    linkIndex = property(_libsalt.LibsaltConnection_linkIndex_get, _libsalt.LibsaltConnection_linkIndex_set)
    direction = property(_libsalt.LibsaltConnection_direction_get, _libsalt.LibsaltConnection_direction_set)
    rotationDir = property(_libsalt.LibsaltConnection_rotationDir_get, _libsalt.LibsaltConnection_rotationDir_set)
    info = property(_libsalt.LibsaltConnection_info_get, _libsalt.LibsaltConnection_info_set)

    def toString(self):
        return _libsalt.LibsaltConnection_toString(self)

# Register LibsaltConnection in _libsalt:
_libsalt.LibsaltConnection_swigregister(LibsaltConnection)

class LibsaltLane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __lt__(self, e):
        return _libsalt.LibsaltLane___lt__(self, e)

    def __init__(self, *args):
        _libsalt.LibsaltLane_swiginit(self, _libsalt.new_LibsaltLane(*args))
    __swig_destroy__ = _libsalt.delete_LibsaltLane
    id = property(_libsalt.LibsaltLane_id_get, _libsalt.LibsaltLane_id_set)
    link = property(_libsalt.LibsaltLane_link_get, _libsalt.LibsaltLane_link_set)
    lane = property(_libsalt.LibsaltLane_lane_get, _libsalt.LibsaltLane_lane_set)

    def toString(self):
        return _libsalt.LibsaltLane_toString(self)

# Register LibsaltLane in _libsalt:
_libsalt.LibsaltLane_swigregister(LibsaltLane)

class LibsaltCell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __lt__(self, e):
        return _libsalt.LibsaltCell___lt__(self, e)

    def __init__(self, *args):
        _libsalt.LibsaltCell_swiginit(self, _libsalt.new_LibsaltCell(*args))
    __swig_destroy__ = _libsalt.delete_LibsaltCell
    id = property(_libsalt.LibsaltCell_id_get, _libsalt.LibsaltCell_id_set)
    link = property(_libsalt.LibsaltCell_link_get, _libsalt.LibsaltCell_link_set)
    section = property(_libsalt.LibsaltCell_section_get, _libsalt.LibsaltCell_section_set)
    lane = property(_libsalt.LibsaltCell_lane_get, _libsalt.LibsaltCell_lane_set)

    def toString(self):
        return _libsalt.LibsaltCell_toString(self)

# Register LibsaltCell in _libsalt:
_libsalt.LibsaltCell_swigregister(LibsaltCell)

class LibsaltRoute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsalt.LibsaltRoute_swiginit(self, _libsalt.new_LibsaltRoute(*args))
    __swig_destroy__ = _libsalt.delete_LibsaltRoute
    route = property(_libsalt.LibsaltRoute_route_get, _libsalt.LibsaltRoute_route_set)

    def toString(self):
        return _libsalt.LibsaltRoute_toString(self)

# Register LibsaltRoute in _libsalt:
_libsalt.LibsaltRoute_swigregister(LibsaltRoute)

class LibsaltVehicle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsalt.LibsaltVehicle_swiginit(self, _libsalt.new_LibsaltVehicle(*args))
    __swig_destroy__ = _libsalt.delete_LibsaltVehicle
    id = property(_libsalt.LibsaltVehicle_id_get, _libsalt.LibsaltVehicle_id_set)
    shape = property(_libsalt.LibsaltVehicle_shape_get, _libsalt.LibsaltVehicle_shape_set)
    speed = property(_libsalt.LibsaltVehicle_speed_get, _libsalt.LibsaltVehicle_speed_set)
    vClass = property(_libsalt.LibsaltVehicle_vClass_get, _libsalt.LibsaltVehicle_vClass_set)
    departTime = property(_libsalt.LibsaltVehicle_departTime_get, _libsalt.LibsaltVehicle_departTime_set)
    cellIndex = property(_libsalt.LibsaltVehicle_cellIndex_get, _libsalt.LibsaltVehicle_cellIndex_set)
    length = property(_libsalt.LibsaltVehicle_length_get, _libsalt.LibsaltVehicle_length_set)
    route = property(_libsalt.LibsaltVehicle_route_get, _libsalt.LibsaltVehicle_route_set)
    routeIndex = property(_libsalt.LibsaltVehicle_routeIndex_get, _libsalt.LibsaltVehicle_routeIndex_set)

    def toString(self):
        return _libsalt.LibsaltVehicle_toString(self)

# Register LibsaltVehicle in _libsalt:
_libsalt.LibsaltVehicle_swigregister(LibsaltVehicle)

class simulation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def load(argv):
        return _libsalt.simulation_load(argv)

    @staticmethod
    def isLoaded():
        return _libsalt.simulation_isLoaded()

    @staticmethod
    def close(*args, **kwargs):
        return _libsalt.simulation_close(*args, **kwargs)

    @staticmethod
    def step(timestep=0):
        return _libsalt.simulation_step(timestep)

    @staticmethod
    def getCurrentStep():
        return _libsalt.simulation_getCurrentStep()

    @staticmethod
    def getBeginStep():
        return _libsalt.simulation_getBeginStep()

    @staticmethod
    def getEndStep():
        return _libsalt.simulation_getEndStep()

    @staticmethod
    def setCurrentStep(timestep):
        return _libsalt.simulation_setCurrentStep(timestep)

    @staticmethod
    def getNetworkManager():
        return _libsalt.simulation_getNetworkManager()

    @staticmethod
    def getVehicleManager():
        return _libsalt.simulation_getVehicleManager()

    @staticmethod
    def getTrafficSignalManager():
        return _libsalt.simulation_getTrafficSignalManager()
    __swig_destroy__ = _libsalt.delete_simulation

# Register simulation in _libsalt:
_libsalt.simulation_swigregister(simulation)

def simulation_load(argv):
    return _libsalt.simulation_load(argv)

def simulation_isLoaded():
    return _libsalt.simulation_isLoaded()

def simulation_close(*args, **kwargs):
    return _libsalt.simulation_close(*args, **kwargs)

def simulation_step(timestep=0):
    return _libsalt.simulation_step(timestep)

def simulation_getCurrentStep():
    return _libsalt.simulation_getCurrentStep()

def simulation_getBeginStep():
    return _libsalt.simulation_getBeginStep()

def simulation_getEndStep():
    return _libsalt.simulation_getEndStep()

def simulation_setCurrentStep(timestep):
    return _libsalt.simulation_setCurrentStep(timestep)

def simulation_getNetworkManager():
    return _libsalt.simulation_getNetworkManager()

def simulation_getVehicleManager():
    return _libsalt.simulation_getVehicleManager()

def simulation_getTrafficSignalManager():
    return _libsalt.simulation_getTrafficSignalManager()

class node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getNodeList():
        return _libsalt.node_getNodeList()

    @staticmethod
    def getNode(nodeID):
        return _libsalt.node_getNode(nodeID)

    @staticmethod
    def getIntersectionType(nodeID):
        return _libsalt.node_getIntersectionType(nodeID)

    @staticmethod
    def getLocation(nodeID):
        return _libsalt.node_getLocation(nodeID)

    @staticmethod
    def getOrderedConnectionList(nodeID):
        return _libsalt.node_getOrderedConnectionList(nodeID)

    @staticmethod
    def getMapOrderConnection(nodeID):
        return _libsalt.node_getMapOrderConnection(nodeID)

    @staticmethod
    def getShape(nodeID):
        return _libsalt.node_getShape(nodeID)

    @staticmethod
    def getCurrentTrafficSignalState(nodeID):
        return _libsalt.node_getCurrentTrafficSignalState(nodeID)

    @staticmethod
    def findConnection(nodeID, fromLink, toLink, fromLane, toLane):
        return _libsalt.node_findConnection(nodeID, fromLink, toLink, fromLane, toLane)

    @staticmethod
    def getOwner(nodeID):
        return _libsalt.node_getOwner(nodeID)
    __swig_destroy__ = _libsalt.delete_node

# Register node in _libsalt:
_libsalt.node_swigregister(node)

def node_getNodeList():
    return _libsalt.node_getNodeList()

def node_getNode(nodeID):
    return _libsalt.node_getNode(nodeID)

def node_getIntersectionType(nodeID):
    return _libsalt.node_getIntersectionType(nodeID)

def node_getLocation(nodeID):
    return _libsalt.node_getLocation(nodeID)

def node_getOrderedConnectionList(nodeID):
    return _libsalt.node_getOrderedConnectionList(nodeID)

def node_getMapOrderConnection(nodeID):
    return _libsalt.node_getMapOrderConnection(nodeID)

def node_getShape(nodeID):
    return _libsalt.node_getShape(nodeID)

def node_getCurrentTrafficSignalState(nodeID):
    return _libsalt.node_getCurrentTrafficSignalState(nodeID)

def node_findConnection(nodeID, fromLink, toLink, fromLane, toLane):
    return _libsalt.node_findConnection(nodeID, fromLink, toLink, fromLane, toLane)

def node_getOwner(nodeID):
    return _libsalt.node_getOwner(nodeID)

class link(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLinkList():
        return _libsalt.link_getLinkList()

    @staticmethod
    def getValidLinkList():
        return _libsalt.link_getValidLinkList()

    @staticmethod
    def getLink(linkID):
        return _libsalt.link_getLink(linkID)

    @staticmethod
    def getLaneList(linkID):
        return _libsalt.link_getLaneList(linkID)

    @staticmethod
    def getLength(linkID):
        return _libsalt.link_getLength(linkID)

    @staticmethod
    def getNumLane(linkID):
        return _libsalt.link_getNumLane(linkID)

    @staticmethod
    def getNumSection(linkID):
        return _libsalt.link_getNumSection(linkID)

    @staticmethod
    def getSpeedLimit(linkID):
        return _libsalt.link_getSpeedLimit(linkID)

    @staticmethod
    def getSumPassed(linkID):
        return _libsalt.link_getSumPassed(linkID)

    @staticmethod
    def getAverageWaitingQLength(linkID):
        return _libsalt.link_getAverageWaitingQLength(linkID)

    @staticmethod
    def getAverageWaitingTime(linkID):
        return _libsalt.link_getAverageWaitingTime(linkID)

    @staticmethod
    def getAverageDensity(linkID):
        return _libsalt.link_getAverageDensity(linkID)

    @staticmethod
    def getAverageSpeed(linkID):
        return _libsalt.link_getAverageSpeed(linkID)

    @staticmethod
    def getAverageVehicleSpeed(linkID):
        return _libsalt.link_getAverageVehicleSpeed(linkID)

    @staticmethod
    def getAverageVehicleWaitingTime(linkID, currentStep, lastSwitchingTime):
        return _libsalt.link_getAverageVehicleWaitingTime(linkID, currentStep, lastSwitchingTime)

    @staticmethod
    def getAverageVehicleWaitingQLength(linkID, currentStep, lastSwitchingTime):
        return _libsalt.link_getAverageVehicleWaitingQLength(linkID, currentStep, lastSwitchingTime)

    @staticmethod
    def getNumWaitingVehicle(linkID, currentStep, lastSwitchingTime):
        return _libsalt.link_getNumWaitingVehicle(linkID, currentStep, lastSwitchingTime)

    @staticmethod
    def getStateOfWaitingVehicleOverTLSDuration(linkID, currentStep):
        return _libsalt.link_getStateOfWaitingVehicleOverTLSDuration(linkID, currentStep)

    @staticmethod
    def getCurrentAverageWaitingTimeBaseVehicle(linkID, currentStep):
        return _libsalt.link_getCurrentAverageWaitingTimeBaseVehicle(linkID, currentStep)

    @staticmethod
    def getCurrentWaitingTimeSumBaseVehicle(linkID, currentStep):
        return _libsalt.link_getCurrentWaitingTimeSumBaseVehicle(linkID, currentStep)

    @staticmethod
    def getSumTravelLength(linkID):
        return _libsalt.link_getSumTravelLength(linkID)

    @staticmethod
    def getSumTravelTime(linkID):
        return _libsalt.link_getSumTravelTime(linkID)

    @staticmethod
    def getCellByIndex(linkID, section, lane):
        return _libsalt.link_getCellByIndex(linkID, section, lane)

    @staticmethod
    def getTrafficSignalState(linkID, nextLinkID):
        return _libsalt.link_getTrafficSignalState(linkID, nextLinkID)

    @staticmethod
    def getAnyConnectionTo(linkID, nextLinkID):
        return _libsalt.link_getAnyConnectionTo(linkID, nextLinkID)

    @staticmethod
    def getConnectionTo(linkID, nextLinkID, fromLane):
        return _libsalt.link_getConnectionTo(linkID, nextLinkID, fromLane)

    @staticmethod
    def canReach(linkID, nextLinkID):
        return _libsalt.link_canReach(linkID, nextLinkID)

    @staticmethod
    def getFromNode(linkID):
        return _libsalt.link_getFromNode(linkID)

    @staticmethod
    def getToNode(linkID):
        return _libsalt.link_getToNode(linkID)

    @staticmethod
    def getSpreadType(linkID):
        return _libsalt.link_getSpreadType(linkID)

    @staticmethod
    def isExceptionalLink(linkID):
        return _libsalt.link_isExceptionalLink(linkID)

    @staticmethod
    def isOutFlowLink(linkID):
        return _libsalt.link_isOutFlowLink(linkID)

    @staticmethod
    def getShape(linkID):
        return _libsalt.link_getShape(linkID)

    @staticmethod
    def getDirection(linkID):
        return _libsalt.link_getDirection(linkID)

    @staticmethod
    def getLeftPocket(linkID):
        return _libsalt.link_getLeftPocket(linkID)

    @staticmethod
    def getRightPocket(linkID):
        return _libsalt.link_getRightPocket(linkID)
    __swig_destroy__ = _libsalt.delete_link

# Register link in _libsalt:
_libsalt.link_swigregister(link)

def link_getLinkList():
    return _libsalt.link_getLinkList()

def link_getValidLinkList():
    return _libsalt.link_getValidLinkList()

def link_getLink(linkID):
    return _libsalt.link_getLink(linkID)

def link_getLaneList(linkID):
    return _libsalt.link_getLaneList(linkID)

def link_getLength(linkID):
    return _libsalt.link_getLength(linkID)

def link_getNumLane(linkID):
    return _libsalt.link_getNumLane(linkID)

def link_getNumSection(linkID):
    return _libsalt.link_getNumSection(linkID)

def link_getSpeedLimit(linkID):
    return _libsalt.link_getSpeedLimit(linkID)

def link_getSumPassed(linkID):
    return _libsalt.link_getSumPassed(linkID)

def link_getAverageWaitingQLength(linkID):
    return _libsalt.link_getAverageWaitingQLength(linkID)

def link_getAverageWaitingTime(linkID):
    return _libsalt.link_getAverageWaitingTime(linkID)

def link_getAverageDensity(linkID):
    return _libsalt.link_getAverageDensity(linkID)

def link_getAverageSpeed(linkID):
    return _libsalt.link_getAverageSpeed(linkID)

def link_getAverageVehicleSpeed(linkID):
    return _libsalt.link_getAverageVehicleSpeed(linkID)

def link_getAverageVehicleWaitingTime(linkID, currentStep, lastSwitchingTime):
    return _libsalt.link_getAverageVehicleWaitingTime(linkID, currentStep, lastSwitchingTime)

def link_getAverageVehicleWaitingQLength(linkID, currentStep, lastSwitchingTime):
    return _libsalt.link_getAverageVehicleWaitingQLength(linkID, currentStep, lastSwitchingTime)

def link_getNumWaitingVehicle(linkID, currentStep, lastSwitchingTime):
    return _libsalt.link_getNumWaitingVehicle(linkID, currentStep, lastSwitchingTime)

def link_getStateOfWaitingVehicleOverTLSDuration(linkID, currentStep):
    return _libsalt.link_getStateOfWaitingVehicleOverTLSDuration(linkID, currentStep)

def link_getCurrentAverageWaitingTimeBaseVehicle(linkID, currentStep):
    return _libsalt.link_getCurrentAverageWaitingTimeBaseVehicle(linkID, currentStep)

def link_getCurrentWaitingTimeSumBaseVehicle(linkID, currentStep):
    return _libsalt.link_getCurrentWaitingTimeSumBaseVehicle(linkID, currentStep)

def link_getSumTravelLength(linkID):
    return _libsalt.link_getSumTravelLength(linkID)

def link_getSumTravelTime(linkID):
    return _libsalt.link_getSumTravelTime(linkID)

def link_getCellByIndex(linkID, section, lane):
    return _libsalt.link_getCellByIndex(linkID, section, lane)

def link_getTrafficSignalState(linkID, nextLinkID):
    return _libsalt.link_getTrafficSignalState(linkID, nextLinkID)

def link_getAnyConnectionTo(linkID, nextLinkID):
    return _libsalt.link_getAnyConnectionTo(linkID, nextLinkID)

def link_getConnectionTo(linkID, nextLinkID, fromLane):
    return _libsalt.link_getConnectionTo(linkID, nextLinkID, fromLane)

def link_canReach(linkID, nextLinkID):
    return _libsalt.link_canReach(linkID, nextLinkID)

def link_getFromNode(linkID):
    return _libsalt.link_getFromNode(linkID)

def link_getToNode(linkID):
    return _libsalt.link_getToNode(linkID)

def link_getSpreadType(linkID):
    return _libsalt.link_getSpreadType(linkID)

def link_isExceptionalLink(linkID):
    return _libsalt.link_isExceptionalLink(linkID)

def link_isOutFlowLink(linkID):
    return _libsalt.link_isOutFlowLink(linkID)

def link_getShape(linkID):
    return _libsalt.link_getShape(linkID)

def link_getDirection(linkID):
    return _libsalt.link_getDirection(linkID)

def link_getLeftPocket(linkID):
    return _libsalt.link_getLeftPocket(linkID)

def link_getRightPocket(linkID):
    return _libsalt.link_getRightPocket(linkID)

class lane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getLength(laneID):
        return _libsalt.lane_getLength(laneID)

    @staticmethod
    def getSpeedLimit(laneID):
        return _libsalt.lane_getSpeedLimit(laneID)

    @staticmethod
    def getNumVehPassed(laneID):
        return _libsalt.lane_getNumVehPassed(laneID)

    @staticmethod
    def getAverageNumVehs(laneID):
        return _libsalt.lane_getAverageNumVehs(laneID)

    @staticmethod
    def getAverageSpeed(laneID):
        return _libsalt.lane_getAverageSpeed(laneID)

    @staticmethod
    def getAverageVehicleSpeed(laneID):
        return _libsalt.lane_getAverageVehicleSpeed(laneID)

    @staticmethod
    def getAverageWaitingQLength(laneID):
        return _libsalt.lane_getAverageWaitingQLength(laneID)

    @staticmethod
    def getAverageWaitingTime(laneID):
        return _libsalt.lane_getAverageWaitingTime(laneID)

    @staticmethod
    def getAverageDensity(laneID):
        return _libsalt.lane_getAverageDensity(laneID)

    @staticmethod
    def getSumTravelLength(laneID):
        return _libsalt.lane_getSumTravelLength(laneID)

    @staticmethod
    def getSumTravelTime(laneID):
        return _libsalt.lane_getSumTravelTime(laneID)

    @staticmethod
    def getCurrentVolume(laneID):
        return _libsalt.lane_getCurrentVolume(laneID)

    @staticmethod
    def getCurrentRoom(laneID):
        return _libsalt.lane_getCurrentRoom(laneID)

    @staticmethod
    def getActivationCount(laneID):
        return _libsalt.lane_getActivationCount(laneID)

    @staticmethod
    def getAverageVehicleWaitingTime(laneID, currentStep, lastSwitchingTime):
        return _libsalt.lane_getAverageVehicleWaitingTime(laneID, currentStep, lastSwitchingTime)

    @staticmethod
    def getAverageVehicleWaitingQLength(laneID, currentStep, lastSwitchingTime):
        return _libsalt.lane_getAverageVehicleWaitingQLength(laneID, currentStep, lastSwitchingTime)

    @staticmethod
    def genNumWaitingVehicle(laneID, currentStep, lastSwitchingTime):
        return _libsalt.lane_genNumWaitingVehicle(laneID, currentStep, lastSwitchingTime)

    @staticmethod
    def getStateOfWaitingVehicleOverTLSDuration(laneID, currentStep):
        return _libsalt.lane_getStateOfWaitingVehicleOverTLSDuration(laneID, currentStep)

    @staticmethod
    def getCurrentAverageWaitingTimeBaseVehicle(laneID, currentStep):
        return _libsalt.lane_getCurrentAverageWaitingTimeBaseVehicle(laneID, currentStep)

    @staticmethod
    def getCurrentWaitingTimeSumBaseVehicle(laneID, currentStep):
        return _libsalt.lane_getCurrentWaitingTimeSumBaseVehicle(laneID, currentStep)
    __swig_destroy__ = _libsalt.delete_lane

# Register lane in _libsalt:
_libsalt.lane_swigregister(lane)

def lane_getLength(laneID):
    return _libsalt.lane_getLength(laneID)

def lane_getSpeedLimit(laneID):
    return _libsalt.lane_getSpeedLimit(laneID)

def lane_getNumVehPassed(laneID):
    return _libsalt.lane_getNumVehPassed(laneID)

def lane_getAverageNumVehs(laneID):
    return _libsalt.lane_getAverageNumVehs(laneID)

def lane_getAverageSpeed(laneID):
    return _libsalt.lane_getAverageSpeed(laneID)

def lane_getAverageVehicleSpeed(laneID):
    return _libsalt.lane_getAverageVehicleSpeed(laneID)

def lane_getAverageWaitingQLength(laneID):
    return _libsalt.lane_getAverageWaitingQLength(laneID)

def lane_getAverageWaitingTime(laneID):
    return _libsalt.lane_getAverageWaitingTime(laneID)

def lane_getAverageDensity(laneID):
    return _libsalt.lane_getAverageDensity(laneID)

def lane_getSumTravelLength(laneID):
    return _libsalt.lane_getSumTravelLength(laneID)

def lane_getSumTravelTime(laneID):
    return _libsalt.lane_getSumTravelTime(laneID)

def lane_getCurrentVolume(laneID):
    return _libsalt.lane_getCurrentVolume(laneID)

def lane_getCurrentRoom(laneID):
    return _libsalt.lane_getCurrentRoom(laneID)

def lane_getActivationCount(laneID):
    return _libsalt.lane_getActivationCount(laneID)

def lane_getAverageVehicleWaitingTime(laneID, currentStep, lastSwitchingTime):
    return _libsalt.lane_getAverageVehicleWaitingTime(laneID, currentStep, lastSwitchingTime)

def lane_getAverageVehicleWaitingQLength(laneID, currentStep, lastSwitchingTime):
    return _libsalt.lane_getAverageVehicleWaitingQLength(laneID, currentStep, lastSwitchingTime)

def lane_genNumWaitingVehicle(laneID, currentStep, lastSwitchingTime):
    return _libsalt.lane_genNumWaitingVehicle(laneID, currentStep, lastSwitchingTime)

def lane_getStateOfWaitingVehicleOverTLSDuration(laneID, currentStep):
    return _libsalt.lane_getStateOfWaitingVehicleOverTLSDuration(laneID, currentStep)

def lane_getCurrentAverageWaitingTimeBaseVehicle(laneID, currentStep):
    return _libsalt.lane_getCurrentAverageWaitingTimeBaseVehicle(laneID, currentStep)

def lane_getCurrentWaitingTimeSumBaseVehicle(laneID, currentStep):
    return _libsalt.lane_getCurrentWaitingTimeSumBaseVehicle(laneID, currentStep)

class cell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getValidCellList():
        return _libsalt.cell_getValidCellList()

    @staticmethod
    def getCellList():
        return _libsalt.cell_getCellList()

    @staticmethod
    def getActiveCellList():
        return _libsalt.cell_getActiveCellList()

    @staticmethod
    def getCell(*args):
        return _libsalt.cell_getCell(*args)

    @staticmethod
    def getAverageVehicleWaitingTime(linkID, section, lane, currentStep, lastSwitchingTime):
        return _libsalt.cell_getAverageVehicleWaitingTime(linkID, section, lane, currentStep, lastSwitchingTime)

    @staticmethod
    def getAverageVehicleWaitingQLength(linkID, section, lane, currentStep, lastSwitchingTime):
        return _libsalt.cell_getAverageVehicleWaitingQLength(linkID, section, lane, currentStep, lastSwitchingTime)

    @staticmethod
    def genNumWaitingVehicle(linkID, section, lane, currentStep, lastSwitchingTime):
        return _libsalt.cell_genNumWaitingVehicle(linkID, section, lane, currentStep, lastSwitchingTime)

    @staticmethod
    def getStateOfWaitingVehicleOverTLSDuration(linkID, section, lane, currentStep):
        return _libsalt.cell_getStateOfWaitingVehicleOverTLSDuration(linkID, section, lane, currentStep)

    @staticmethod
    def getCurrentAverageWaitingTimeBaseVehicle(linkID, section, lane, currentStep):
        return _libsalt.cell_getCurrentAverageWaitingTimeBaseVehicle(linkID, section, lane, currentStep)

    @staticmethod
    def getCurrentWaitingTimeSumBaseVehicle(linkID, section, lane, currentStep):
        return _libsalt.cell_getCurrentWaitingTimeSumBaseVehicle(linkID, section, lane, currentStep)

    @staticmethod
    def getCurrentVolume(*args):
        return _libsalt.cell_getCurrentVolume(*args)

    @staticmethod
    def getCurrentRoom(*args):
        return _libsalt.cell_getCurrentRoom(*args)

    @staticmethod
    def getLength(*args):
        return _libsalt.cell_getLength(*args)

    @staticmethod
    def getSpeedLimit(*args):
        return _libsalt.cell_getSpeedLimit(*args)

    @staticmethod
    def getNumVehPassed(*args):
        return _libsalt.cell_getNumVehPassed(*args)

    @staticmethod
    def getSumTravelTime(*args):
        return _libsalt.cell_getSumTravelTime(*args)

    @staticmethod
    def getSumTravelLength(*args):
        return _libsalt.cell_getSumTravelLength(*args)

    @staticmethod
    def getAverageWaitingQLength(*args):
        return _libsalt.cell_getAverageWaitingQLength(*args)

    @staticmethod
    def getAverageDensity(*args):
        return _libsalt.cell_getAverageDensity(*args)

    @staticmethod
    def getAverageNumVehicles(*args):
        return _libsalt.cell_getAverageNumVehicles(*args)

    @staticmethod
    def getAverageSpeed(*args):
        return _libsalt.cell_getAverageSpeed(*args)

    @staticmethod
    def getAverageVehicleSpeed(*args):
        return _libsalt.cell_getAverageVehicleSpeed(*args)

    @staticmethod
    def getAverageWaitingTime(*args):
        return _libsalt.cell_getAverageWaitingTime(*args)

    @staticmethod
    def getCurrentWaitingVolume(*args):
        return _libsalt.cell_getCurrentWaitingVolume(*args)

    @staticmethod
    def getCurrentRunningVolume(*args):
        return _libsalt.cell_getCurrentRunningVolume(*args)

    @staticmethod
    def getCurrentPendingVolume(*args):
        return _libsalt.cell_getCurrentPendingVolume(*args)

    @staticmethod
    def getCurrentReceivingVolume(*args):
        return _libsalt.cell_getCurrentReceivingVolume(*args)
    __swig_destroy__ = _libsalt.delete_cell

# Register cell in _libsalt:
_libsalt.cell_swigregister(cell)

def cell_getValidCellList():
    return _libsalt.cell_getValidCellList()

def cell_getCellList():
    return _libsalt.cell_getCellList()

def cell_getActiveCellList():
    return _libsalt.cell_getActiveCellList()

def cell_getCell(*args):
    return _libsalt.cell_getCell(*args)

def cell_getAverageVehicleWaitingTime(linkID, section, lane, currentStep, lastSwitchingTime):
    return _libsalt.cell_getAverageVehicleWaitingTime(linkID, section, lane, currentStep, lastSwitchingTime)

def cell_getAverageVehicleWaitingQLength(linkID, section, lane, currentStep, lastSwitchingTime):
    return _libsalt.cell_getAverageVehicleWaitingQLength(linkID, section, lane, currentStep, lastSwitchingTime)

def cell_genNumWaitingVehicle(linkID, section, lane, currentStep, lastSwitchingTime):
    return _libsalt.cell_genNumWaitingVehicle(linkID, section, lane, currentStep, lastSwitchingTime)

def cell_getStateOfWaitingVehicleOverTLSDuration(linkID, section, lane, currentStep):
    return _libsalt.cell_getStateOfWaitingVehicleOverTLSDuration(linkID, section, lane, currentStep)

def cell_getCurrentAverageWaitingTimeBaseVehicle(linkID, section, lane, currentStep):
    return _libsalt.cell_getCurrentAverageWaitingTimeBaseVehicle(linkID, section, lane, currentStep)

def cell_getCurrentWaitingTimeSumBaseVehicle(linkID, section, lane, currentStep):
    return _libsalt.cell_getCurrentWaitingTimeSumBaseVehicle(linkID, section, lane, currentStep)

def cell_getCurrentVolume(*args):
    return _libsalt.cell_getCurrentVolume(*args)

def cell_getCurrentRoom(*args):
    return _libsalt.cell_getCurrentRoom(*args)

def cell_getLength(*args):
    return _libsalt.cell_getLength(*args)

def cell_getSpeedLimit(*args):
    return _libsalt.cell_getSpeedLimit(*args)

def cell_getNumVehPassed(*args):
    return _libsalt.cell_getNumVehPassed(*args)

def cell_getSumTravelTime(*args):
    return _libsalt.cell_getSumTravelTime(*args)

def cell_getSumTravelLength(*args):
    return _libsalt.cell_getSumTravelLength(*args)

def cell_getAverageWaitingQLength(*args):
    return _libsalt.cell_getAverageWaitingQLength(*args)

def cell_getAverageDensity(*args):
    return _libsalt.cell_getAverageDensity(*args)

def cell_getAverageNumVehicles(*args):
    return _libsalt.cell_getAverageNumVehicles(*args)

def cell_getAverageSpeed(*args):
    return _libsalt.cell_getAverageSpeed(*args)

def cell_getAverageVehicleSpeed(*args):
    return _libsalt.cell_getAverageVehicleSpeed(*args)

def cell_getAverageWaitingTime(*args):
    return _libsalt.cell_getAverageWaitingTime(*args)

def cell_getCurrentWaitingVolume(*args):
    return _libsalt.cell_getCurrentWaitingVolume(*args)

def cell_getCurrentRunningVolume(*args):
    return _libsalt.cell_getCurrentRunningVolume(*args)

def cell_getCurrentPendingVolume(*args):
    return _libsalt.cell_getCurrentPendingVolume(*args)

def cell_getCurrentReceivingVolume(*args):
    return _libsalt.cell_getCurrentReceivingVolume(*args)

class connection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getConnectionList():
        return _libsalt.connection_getConnectionList()
    __swig_destroy__ = _libsalt.delete_connection

# Register connection in _libsalt:
_libsalt.connection_swigregister(connection)

def connection_getConnectionList():
    return _libsalt.connection_getConnectionList()

class vehicle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getNumVehicles():
        return _libsalt.vehicle_getNumVehicles()

    @staticmethod
    def getStandbyVehicles():
        return _libsalt.vehicle_getStandbyVehicles()

    @staticmethod
    def getRunningVehicles():
        return _libsalt.vehicle_getRunningVehicles()

    @staticmethod
    def getShape(vehicleID):
        return _libsalt.vehicle_getShape(vehicleID)

    @staticmethod
    def getDepartTime(vehicleID):
        return _libsalt.vehicle_getDepartTime(vehicleID)

    @staticmethod
    def getCellIndex(vehicleID):
        return _libsalt.vehicle_getCellIndex(vehicleID)

    @staticmethod
    def getRouteString(vehicleID):
        return _libsalt.vehicle_getRouteString(vehicleID)

    @staticmethod
    def getRoute(vehicleID):
        return _libsalt.vehicle_getRoute(vehicleID)

    @staticmethod
    def getLength(vehicleID):
        return _libsalt.vehicle_getLength(vehicleID)

    @staticmethod
    def getSpeed(vehicleID):
        return _libsalt.vehicle_getSpeed(vehicleID)

    @staticmethod
    def getClass(vehicleID):
        return _libsalt.vehicle_getClass(vehicleID)

    @staticmethod
    def getLink(vehicleID, linkIndex):
        return _libsalt.vehicle_getLink(vehicleID, linkIndex)

    @staticmethod
    def getLinkID(vehicleID, linkIndex):
        return _libsalt.vehicle_getLinkID(vehicleID, linkIndex)

    @staticmethod
    def getNextLink(vehicleID, hop):
        return _libsalt.vehicle_getNextLink(vehicleID, hop)

    @staticmethod
    def getNextLinkID(vehicleID, hop):
        return _libsalt.vehicle_getNextLinkID(vehicleID, hop)

    @staticmethod
    def getNextValidLink(vehicleID):
        return _libsalt.vehicle_getNextValidLink(vehicleID)

    @staticmethod
    def getNextValidLinkID(vehicleID):
        return _libsalt.vehicle_getNextValidLinkID(vehicleID)

    @staticmethod
    def getRouteDepartingLink(vehicleID):
        return _libsalt.vehicle_getRouteDepartingLink(vehicleID)

    @staticmethod
    def getRouteDepartingLinkID(vehicleID):
        return _libsalt.vehicle_getRouteDepartingLinkID(vehicleID)

    @staticmethod
    def getCurrentLink(vehicleID):
        return _libsalt.vehicle_getCurrentLink(vehicleID)

    @staticmethod
    def getCurrentLinkID(vehicleID):
        return _libsalt.vehicle_getCurrentLinkID(vehicleID)

    @staticmethod
    def getCurrentCell(vehicleID):
        return _libsalt.vehicle_getCurrentCell(vehicleID)

    @staticmethod
    def getCurrentCellID(vehicleID):
        return _libsalt.vehicle_getCurrentCellID(vehicleID)

    @staticmethod
    def getNextValidCell(vehicleID):
        return _libsalt.vehicle_getNextValidCell(vehicleID)

    @staticmethod
    def getNextValidCellID(vehicleID):
        return _libsalt.vehicle_getNextValidCellID(vehicleID)
    __swig_destroy__ = _libsalt.delete_vehicle

# Register vehicle in _libsalt:
_libsalt.vehicle_swigregister(vehicle)

def vehicle_getNumVehicles():
    return _libsalt.vehicle_getNumVehicles()

def vehicle_getStandbyVehicles():
    return _libsalt.vehicle_getStandbyVehicles()

def vehicle_getRunningVehicles():
    return _libsalt.vehicle_getRunningVehicles()

def vehicle_getShape(vehicleID):
    return _libsalt.vehicle_getShape(vehicleID)

def vehicle_getDepartTime(vehicleID):
    return _libsalt.vehicle_getDepartTime(vehicleID)

def vehicle_getCellIndex(vehicleID):
    return _libsalt.vehicle_getCellIndex(vehicleID)

def vehicle_getRouteString(vehicleID):
    return _libsalt.vehicle_getRouteString(vehicleID)

def vehicle_getRoute(vehicleID):
    return _libsalt.vehicle_getRoute(vehicleID)

def vehicle_getLength(vehicleID):
    return _libsalt.vehicle_getLength(vehicleID)

def vehicle_getSpeed(vehicleID):
    return _libsalt.vehicle_getSpeed(vehicleID)

def vehicle_getClass(vehicleID):
    return _libsalt.vehicle_getClass(vehicleID)

def vehicle_getLink(vehicleID, linkIndex):
    return _libsalt.vehicle_getLink(vehicleID, linkIndex)

def vehicle_getLinkID(vehicleID, linkIndex):
    return _libsalt.vehicle_getLinkID(vehicleID, linkIndex)

def vehicle_getNextLink(vehicleID, hop):
    return _libsalt.vehicle_getNextLink(vehicleID, hop)

def vehicle_getNextLinkID(vehicleID, hop):
    return _libsalt.vehicle_getNextLinkID(vehicleID, hop)

def vehicle_getNextValidLink(vehicleID):
    return _libsalt.vehicle_getNextValidLink(vehicleID)

def vehicle_getNextValidLinkID(vehicleID):
    return _libsalt.vehicle_getNextValidLinkID(vehicleID)

def vehicle_getRouteDepartingLink(vehicleID):
    return _libsalt.vehicle_getRouteDepartingLink(vehicleID)

def vehicle_getRouteDepartingLinkID(vehicleID):
    return _libsalt.vehicle_getRouteDepartingLinkID(vehicleID)

def vehicle_getCurrentLink(vehicleID):
    return _libsalt.vehicle_getCurrentLink(vehicleID)

def vehicle_getCurrentLinkID(vehicleID):
    return _libsalt.vehicle_getCurrentLinkID(vehicleID)

def vehicle_getCurrentCell(vehicleID):
    return _libsalt.vehicle_getCurrentCell(vehicleID)

def vehicle_getCurrentCellID(vehicleID):
    return _libsalt.vehicle_getCurrentCellID(vehicleID)

def vehicle_getNextValidCell(vehicleID):
    return _libsalt.vehicle_getNextValidCell(vehicleID)

def vehicle_getNextValidCellID(vehicleID):
    return _libsalt.vehicle_getNextValidCellID(vehicleID)

FAIL = _libsalt.FAIL
SUCCEED = _libsalt.SUCCEED
class trafficsignal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getTLSIDList():
        return _libsalt.trafficsignal_getTLSIDList()

    @staticmethod
    def getTLSIDCount():
        return _libsalt.trafficsignal_getTLSIDCount()

    @staticmethod
    def getTLSByNodeID(_tlsID):
        return _libsalt.trafficsignal_getTLSByNodeID(_tlsID)

    @staticmethod
    def getTLSConnectedLinkID(_tlsID):
        return _libsalt.trafficsignal_getTLSConnectedLinkID(_tlsID)

    @staticmethod
    def getTLSScheduleIDsByNodeID(_tlsID):
        return _libsalt.trafficsignal_getTLSScheduleIDsByNodeID(_tlsID)

    @staticmethod
    def getCurrentTLSScheduleIDByNodeID(_tlsID):
        return _libsalt.trafficsignal_getCurrentTLSScheduleIDByNodeID(_tlsID)

    @staticmethod
    def getCurrentTLSScheduleByNodeID(_tlsID):
        return _libsalt.trafficsignal_getCurrentTLSScheduleByNodeID(_tlsID)

    @staticmethod
    def getTLSPhasesByNodeID(_tlsID, _scheduleID):
        return _libsalt.trafficsignal_getTLSPhasesByNodeID(_tlsID, _scheduleID)

    @staticmethod
    def getTLSPhaseByNodeID(_tlsID, _scheduleID, _phaseIndex):
        return _libsalt.trafficsignal_getTLSPhaseByNodeID(_tlsID, _scheduleID, _phaseIndex)

    @staticmethod
    def getCurrentTLSPhaseStateByNodeID(_tlsID):
        return _libsalt.trafficsignal_getCurrentTLSPhaseStateByNodeID(_tlsID)

    @staticmethod
    def getCurrentTLSPhaseIndexByNodeID(_tlsID):
        return _libsalt.trafficsignal_getCurrentTLSPhaseIndexByNodeID(_tlsID)

    @staticmethod
    def getLastTLSPhaseSwitchingTimeByNodeID(_tlsID):
        return _libsalt.trafficsignal_getLastTLSPhaseSwitchingTimeByNodeID(_tlsID)

    @staticmethod
    def setTLSByNodeID(_tlsID, _logic):
        return _libsalt.trafficsignal_setTLSByNodeID(_tlsID, _logic)

    @staticmethod
    def setTLSPhaseVector(*args):
        return _libsalt.trafficsignal_setTLSPhaseVector(*args)

    @staticmethod
    def changeTLSPhase(triggertime, _nodeID, _scheduleID, _phaseIndex):
        return _libsalt.trafficsignal_changeTLSPhase(triggertime, _nodeID, _scheduleID, _phaseIndex)

    def __init__(self):
        _libsalt.trafficsignal_swiginit(self, _libsalt.new_trafficsignal())
    __swig_destroy__ = _libsalt.delete_trafficsignal

# Register trafficsignal in _libsalt:
_libsalt.trafficsignal_swigregister(trafficsignal)

def trafficsignal_getTLSIDList():
    return _libsalt.trafficsignal_getTLSIDList()

def trafficsignal_getTLSIDCount():
    return _libsalt.trafficsignal_getTLSIDCount()

def trafficsignal_getTLSByNodeID(_tlsID):
    return _libsalt.trafficsignal_getTLSByNodeID(_tlsID)

def trafficsignal_getTLSConnectedLinkID(_tlsID):
    return _libsalt.trafficsignal_getTLSConnectedLinkID(_tlsID)

def trafficsignal_getTLSScheduleIDsByNodeID(_tlsID):
    return _libsalt.trafficsignal_getTLSScheduleIDsByNodeID(_tlsID)

def trafficsignal_getCurrentTLSScheduleIDByNodeID(_tlsID):
    return _libsalt.trafficsignal_getCurrentTLSScheduleIDByNodeID(_tlsID)

def trafficsignal_getCurrentTLSScheduleByNodeID(_tlsID):
    return _libsalt.trafficsignal_getCurrentTLSScheduleByNodeID(_tlsID)

def trafficsignal_getTLSPhasesByNodeID(_tlsID, _scheduleID):
    return _libsalt.trafficsignal_getTLSPhasesByNodeID(_tlsID, _scheduleID)

def trafficsignal_getTLSPhaseByNodeID(_tlsID, _scheduleID, _phaseIndex):
    return _libsalt.trafficsignal_getTLSPhaseByNodeID(_tlsID, _scheduleID, _phaseIndex)

def trafficsignal_getCurrentTLSPhaseStateByNodeID(_tlsID):
    return _libsalt.trafficsignal_getCurrentTLSPhaseStateByNodeID(_tlsID)

def trafficsignal_getCurrentTLSPhaseIndexByNodeID(_tlsID):
    return _libsalt.trafficsignal_getCurrentTLSPhaseIndexByNodeID(_tlsID)

def trafficsignal_getLastTLSPhaseSwitchingTimeByNodeID(_tlsID):
    return _libsalt.trafficsignal_getLastTLSPhaseSwitchingTimeByNodeID(_tlsID)

def trafficsignal_setTLSByNodeID(_tlsID, _logic):
    return _libsalt.trafficsignal_setTLSByNodeID(_tlsID, _logic)

def trafficsignal_setTLSPhaseVector(*args):
    return _libsalt.trafficsignal_setTLSPhaseVector(*args)

def trafficsignal_changeTLSPhase(triggertime, _nodeID, _scheduleID, _phaseIndex):
    return _libsalt.trafficsignal_changeTLSPhase(triggertime, _nodeID, _scheduleID, _phaseIndex)



