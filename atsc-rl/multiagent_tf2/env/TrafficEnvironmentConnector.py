class TrafficEnvironmentConnector:
    def __init__(self, name):
        self.name=name

    def toString(self):
        sb = "name={}".format(self.name)
        return sb


    ##
    ##### control simulator
    ##
    def start(self, param1, param2="."):
        pass


    def close(self):
        pass


    def increaseStep(self):
        pass


    #####
    ##
    ## set
    ##

    def setCurrentStep(self, step):
        pass

    def setPhase(self, tl, given_phase):
        ''' 
        set the signal phase of the given traffic light as a given phase
        '''
        pass


    def setPhaseVector(self, sim_step, tlid, scheduleId, phase_vector):
        pass

    ##
    ##### get
    ##
    def getAverageDensityOfane(self, lane_id):
        pass

    def getAverageSpeedOfLink(self, link_id):
        pass


    def getCurrentScheduleId(self, tlid):
        pass

    def getCurrentSchedulePhaseVector(self, tlid):
        pass

    def getCurrentStep(self):
        pass


    def getCurrentPhaseIndex(self, tlid):
        pass

    def getLengthOfLane(self, lain_id):
        pass


    def getNumLaneOfLink(self, edge):
        pass

    def getNumVehPassedOfLane(self, lane_id):
        pass


    def getSumPassed(self, gathered_info, an_info_dic):
        '''
        gather info about passed vehicle num per link

        :param gathered_info : an object to store collected info
        :param an_info_dic : a dictionary object which holds information about a SA or a TL
                            (either a dictionary object about a SA or a dictionary object about a TL)
        :return gathered_info
        '''
        pass

    def getSumPassedOfLink(self, link_id):
        pass


    def getSumTravelTimeOfLink(self, link_id):
        pass



    def getTravelTime(self, gathered_info, an_info_dic, reward_info_collection_cycle):
        '''
        gather info about passed vehicle num per link

        :param gathered_info : an object to store collected info
        :param an_info_dic : a dictionary object which holds information about a SA or a TL
                            (either a dictionary object about a SA or a dictionary object about a TL)
        :param reward_info_collection_cycle
        :return gathered_info
        '''
        pass


    def getWaitingQLength(self, gathered_info, an_info_dic):
        '''
        gather info about passed vehicle num per link

        :param gathered_info : an object to store collected info
        :param an_info_dic : a dictionary object which holds information about a SA or a TL
                            (either a dictionary object about a SA or a dictionary object about a TL)
        :return gathered_info
        '''
        pass


    def getWaitingTime(self, gathered_info, an_info_dic, action_t):
        '''
        gather info about passed vehicle num per link

        :param gathered_info : an object to store collected info
        :param an_info_dic : a dictionary object which holds information about a SA or a TL
                            (either a dictionary object about a SA or a dictionary object about a TL)
        :param action_t
        :return gathered_info
        '''
        pass


    def getSimulationStartStepAndEndStep(self, args):
        '''
        get begin- & end-time of simulation

        :param args:
        :return:
        '''
        pass


    def compareResult(self, args, target_tl_obj, ft_output, rl_output, model_num, passed_res_comp_skip=-1):
        '''
        compare two result files and calculate improvement rate for each intersection, each SA and overall

        :param args:
        :param target_tl_obj: information about target TL
        :param ft_output: a data frame object which was generated by reading an output (csv) file of simulator
                               that performed the signal control simulation based on the fixed signal
        :param rl_output: a data frame object which was generated by reading an output (csv) file of simulator
                               that performed signal control simulation based on reinforcement learning inference
        :param model_num: number which indicate optimal model which was used to TEST
        :param passed_res_comp_skip : steps to skip to exclude comparison(result comparison)
        :return:
        '''
        pass


    def getSaRelatedInfo(self, args, sa_name_list, salt_scenario):
        '''
        gather SA related info such as contained TLs, TSS, lane, link,....
        :param args: parsed argument
        :param sa_name_list: list of name of SA which are interesting
        :param salt_scenario: scenario file path
        :return:
        '''
        pass


    def gatherTsoOutputInfo(self, tl_id, tl_obj, num_hop=0):
        '''
        gather TSO-related information of given intersection

        TSO-related information : average speed, travel time, passed vehicle num

        :param tl_id: inersection identifier
        :param tl_obj:  objects which holds TL information
        :param num_hop: number of hop to calculate speed
        :return:
        '''
        pass








    #######################################################
    '''
    def getOneTLPhase(self, tl):
        pass


    def getAllTLPhase(self, light_list):
        pass


    def getAllTrafficLights(self):
        """
        모든 신호등 식별자
        :return:
        """
        pass


    def getArrivedNumber(self):
        """
        :return:
        """
        pass


    def getCollidingVehiclesNumber(self):
        pass


    def getControlledLanes(self, tl, uniq=True, deep=False):
        """
        제어받는 LANE 식별자
        :param tl:
        :param uniq:
        :param deep:
        :return:
        """
        pass


    def getCurrentPhaseIndex(self, tl):
        return traci.trafficlight.getPhase(tl)

    def getCurrentPhaseWithOneHot(self, tl):
        """
        현재 신호 상태 정보를 (one-hot encoding)하여 반환
        :param tl:
        :return:
        """
        pass


    def getDepartedNumber(self):
        pass

    def getLastStepHaltingNumber(self, lane):
        """
        마지막 스텝에서 주어진 차선에 정지된 차량 수
        :param lane:
        :return:
        """
        pass

    def getLastStepMeanSpeed(self, lane):
        """
        마지막 스탬에서 해당 차선의 차량 평균 속도 (m/s)
        :param lane:
        :return:
        """
        pass

    def getLastStepOccupancy(self, lane):
        """
        마지막 스텝에서 진입 차선의 점유율(%)
        :param lane:
        :return:
        """
        pass

    def getLastStepVehicleNumber(self, lane):
        """
        마지막 스텝에서 해당 차선의 총 차량 수
        :param lane:
        :return:
        """
        pass

    def getOutgoingLanes(self, tlid, uniq=True, deep=False):
        pass

    def getRemainVehicleNumber(self):
        pass

    def getRemainedDuration(self, tlid, phase_duration):
        pass

    def getSpentDuration(self, tlid, phase_duration):
        pass

    def getStartingTeleportNumber(self):
        pass

    def getWaitingTime(self, lane):
        """
        차량 대기 시간 (마지막으로 0.1m/s 보다 빨리 이동한 후 시간)
        :param lane:
        :return:
        """
        pass

    def gatherUsefulInfo(self):
        """
         최적화 환경 관련 정보를 얻어온다
         return UsefullInfo
        """
        pass
'''